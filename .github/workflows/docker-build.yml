name: Docker Manage the v8 Jobs and related Coders.

on: workflow_dispatch

jobs:
  docker-build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Open the Office for the Ninjas makes coders feel less cheap to be called Ninja implicits hornor.
      id: set-env
      run: |
        echo "DATE=$(date -I)" >> $GITHUB_ENV
        export WORKDIR="$(pwd)/build"
        echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV
        echo "V8=${WORKDIR}/v8" >> $GITHUB_ENV
        export DEPOT_TOOLS="${WORKDIR}/depot_tools"
        echo "DEPOT_TOOLS=${DEPOT_TOOLS}" >> $GITHUB_ENV
        echo "PATH=${DEPOT_TOOLS}:$PATH" >> $GITHUB_ENV
        echo "BRANCH=branch-heads/10.7" >> $GITHUB_ENV
    - name: Cache v8-deps-bullseye-x86_64 - Ninjas Backlog lockup.
      id: v8-deps-bullseye-x86_64
      uses: actions/cache@v3
      with:
        path: build-deps
        key: v8-deps-bullseye-x86_64
    - name: v8-deps-bullseye-x86_64 - Create work for Ninja's
      if: steps.v8-deps-bullseye-x86_64.outputs.cache-hit != 'true'
      env:
        PATHS: ${{ env.PATH }}
        DEPOT_TOOLS: ${{ env.DEPOT_TOOLS }}
      
      run: |
        docker volume create volume_v8-deps-bullseye-x86_64
        # docker export v8-deps-bullseye-x86_64 | gzip > build-deps/v8-bullseye-x86_64_latest.tar.gz
                                  
        # Note that this is exactly what docker build does for each RUN defined layer
        cat <<'EOF' | docker run -v volume_v8-deps-bullseye-x86_64:/build -i --name container_build-deps debian:bullseye-slim
         apt update && apt upgrade -y && apt install -y git curl python lsb-release sudo
         cd build
         git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
         /build/depot_tools/gclient
        EOF
        
        docker commit container_build-deps image_build:build-deps
        # docker save v8-bullseye-x86_64:latest | gzip > build-deps/v8-bullseye-x86_64_latest.tar.gz
        
        cat <<'EOF' | docker run -v volume_v8-deps-bullseye-x86_64:/build -i --name container_build-v8-deps-bullseye-x86_64 image_build:build-deps
          cd /build
          /build/depot_tools/fetch v8 
          cd /build/v8 
          git checkout branch-heads/10.8 
          /build/depot_tools/gclient sync
          /build/v8/build/install-build-deps.sh --no-syms --no-chromeos-fonts --no-arm --no-nacl --no-backwards-compatible
          /build/v8/tools/dev/v8gen.py x64.release -- target_os=\"linux\" target_cpu=\"x64\" v8_target_cpu=\"x64\" \
            v8_use_external_startup_data=false \
            v8_enable_future=true \
            is_official_build=false \
            is_component_build=false \
            is_cfi=false \
            is_asan=false \
            is_clang=false \
            use_custom_libcxx=false \
            use_custom_libcxx_for_host=false \
            use_sysroot=false \
            use_gold=false \
            is_debug=false \
            treat_warnings_as_errors=false \
            v8_enable_i18n_support=false \
            symbol_level=0 \
            v8_static_library=true \
            v8_monolithic=true \
            proprietary_codecs=false \
            toolkit_views=false \
            use_aura=false \
            use_dbus=false \
            use_gio=false \
            use_glib=false \
            use_ozone=false \
            use_udev=false \
            clang_use_chrome_plugins=false \
            v8_deprecation_warnings=false \
            v8_enable_gdbjit=false \
            v8_imminent_deprecation_warnings=false \
            v8_enable_pointer_compression=true \
            v8_scriptormodule_legacy_lifetime=true \
            v8_enable_sandbox=false
        EOF

        docker commit build-v8-deps-bullseye-x86_64 v8-deps-bullseye-x86_64:latest 

        ## Build Cache the updated image
        mkdir build-deps
        docker save image_v8-deps-bullseye-x86_64:latest | gzip > build-deps/image_v8-deps-bullseye-x86_64_latest.tar.gz
        docker export volume_v8-deps-bullseye-x86_64 | gzip > build-deps/volume_v8-deps-bullseye-x86_64_latest.tar.gz
     
    - name: build-linux-x86_64 - Ninja
      if: steps.v8-bullseye-x86_64.outputs.cache-hit != 'true'
      env:
        PATHS: ${{ env.PATH }}
        DEPOT_TOOLS: ${{ env.DEPOT_TOOLS }}
      run: |
        # Should be only 
        # docker load -i build-deps/v8-bullseye-x86_64_latest.tar.gz
        sudo chown -R 1000:1000 build-deps
        cat <<'EOF' | docker run -v $(pwd)/build-deps:/build -w /build/v8 -i --name build-v8-bullseye-x86_64 v8-deps-bullseye-x86_64:latest
          /build/depot_tools/ninja v8_monolith -C out.gn/x64.release/ -j $(getconf _NPROCESSORS_ONLN)
        EOF
        sudo chown -R 1000:1000 build-deps
        ## Build Result
        # TODO Export the whole obj folder to build distributed build cache.
        mkdir -p dist/v8
        cp build-deps/v8/out.gn/x64.release/obj/libv8_monolith.a dist/v8/v8-bullseye-x86_64.a
        cp -r build-deps/v8/include dist/v8
    - uses: actions/upload-artifact@v3
      with:
        name: v8-deps-bullseye-x86_64
        path: build-deps
        if-no-files-found: error

